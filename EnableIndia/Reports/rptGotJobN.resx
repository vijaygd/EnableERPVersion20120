<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="sqlDataSource1.SelectCommand" xml:space="preserve">
    <value>SELECT cand_other_detl.candidate_name_with_status AS candidate_name, cand.registration_id, cand.candidate_id, disability.disability_type, disab_sub_type.disability_sub_type, 
                  (CASE WHEN cand_work_expr.company_id = '-1' THEN cand_work_expr.unlisted_company WHEN cand_work_expr.company_id &gt; 0 THEN comp.company_code end) 
                  AS company_name, (CASE WHEN cand_work_expr.parent_company_id = '-1' THEN '' WHEN cand_work_expr.parent_company_id &gt; 0 THEN par_comp.company_name end) 
                  AS Parent_company_name, vac.vacancy_name, 
                  (CASE WHEN cand_work_expr.is_entered_from_employment_project &gt; '0' THEN 'YES' WHEN cand_work_expr.is_entered_from_employment_project &lt; '1' THEN 'NO ' end) 
                  AS Got_placed_by_EI, cand_work_expr.designation_from_date AS date_of_join, cand_work_expr.monthly_salary AS salary, jb_rl.job_role_name, 
                  (CASE WHEN jobs.job_id &gt; '0' THEN jobs.job_name WHEN jobs.job_name &lt; '1' THEN 'Unlisted' end) AS job_Type, cand.recommended_job_roles AS recommended_job_role, 
                  concat(emp.employee_first_name, emp.employee_middle_name, emp.employee_last_name) AS managed_by, 
                  (CASE WHEN cand_ass_emp_proj.employment_proof_received &gt; - 1 AND 
                  cand_work_expr.is_entered_from_employment_project &gt; '0' THEN 'YES' WHEN cand_ass_emp_proj.employment_proof_received &lt; 0 AND 
                  cand_work_expr.is_entered_from_employment_project &gt; '0' THEN 'NO' end) AS Candidate_varification_done, 
                  (CASE WHEN cand_work_expr.emp_proof_received = 'Y' THEN 'Yes' ELSE 'No' end) AS employee_proof_received, compcont.contact_name AS contact_name, 
                  compcont.phone_number AS contact_phone,
                      (SELECT COUNT(*)
                       FROM      disability_types disability
                       WHERE   cand.disability_id = 1 AND cand.disability_id = disability.disability_id) AS No_of_VI,
                      (SELECT COUNT(*)
                       FROM      disability_types disability
                       WHERE   cand.disability_id = 2 AND cand.disability_id = disability.disability_id) AS No_of_HI,
                      (SELECT COUNT(*)
                       FROM      disability_types disability
                       WHERE   cand.disability_id = 3 AND cand.disability_id = disability.disability_id) AS No_of_PD,
                      (SELECT COUNT(*)
                       FROM      disability_types disability
                       WHERE   cand.disability_id = 4 AND cand.disability_id = disability.disability_id) AS No_of_MI,
                      (SELECT COUNT(*)
                       FROM      disability_types disability
                       WHERE   cand.disability_id = 5 AND cand.disability_id = disability.disability_id) AS No_of_MR,
                      (SELECT COUNT(*)
                       FROM      disability_types disability
                       WHERE   cand.disability_id = 6 AND cand.disability_id = disability.disability_id) AS No_of_CP,
                      (SELECT COUNT(*)
                       FROM      disability_types disability
                       WHERE   cand.disability_id = 7 AND cand.disability_id = disability.disability_id) AS No_of_DB,
                      (SELECT COUNT(*)
                       FROM      disability_types disability
                       WHERE   cand.disability_id = 8 AND cand.disability_id = disability.disability_id) AS No_of_Others_disb
FROM     (SELECT *
                  FROM      candidate_work_experience
                  WHERE   mark_deleted = 0 AND designation_to_date = '5000-01-01') AS cand_work_expr LEFT JOIN
                  candidates cand ON cand_work_expr.candidate_id = cand.candidate_id AND is_registration_completed = 1 AND cand.is_active = 1 LEFT JOIN
                  candidate_other_details cand_other_detl ON cand_other_detl.candidate_id = cand.candidate_id LEFT JOIN
                  ngos ngo ON cand.ngo_id = ngo.ngo_id LEFT JOIN
                  disability_types disability ON cand.disability_id = disability.disability_id LEFT JOIN
                  disability_sub_types disab_sub_type ON cand.disability_sub_type_id = disab_sub_type.disability_sub_type_id LEFT JOIN
                  states state ON cand.present_address_state_id = state.state_id LEFT JOIN
                  cities city ON cand.present_address_city_id = city.city_id LEFT JOIN
                  candidate_recommended_roles c_rol ON cand.candidate_id = c_rol.candidate_id LEFT JOIN
                  job_roles jb_rl ON cand_work_expr.job_role_id = jb_rl.job_role_id LEFT JOIN
                  jobs ON jb_rl.job_id = jobs.job_id LEFT JOIN
                  companies comp ON cand_work_expr.company_id = comp.company_id LEFT JOIN
                  parent_companies par_comp ON cand_work_expr.parent_company_id = par_comp.company_id LEFT JOIN
                  industry_segments ind ON comp.industry_segment_id = ind.industry_segment_id LEFT JOIN
                  candidates_assigned_to_employment_project cand_ass_emp_proj ON cand_work_expr.candidate_id = cand_ass_emp_proj.candidate_id AND 
                  cand_ass_emp_proj.got_job = 1 AND cand_ass_emp_proj.is_candidate_deleted = 0 AND cand_ass_emp_proj.employment_project_id LEFT JOIN
                  employment_projects emp_proj ON cand_ass_emp_proj.employment_project_id = emp_proj.employment_project_id AND emp_proj.is_closed = 0 OR 
                  (cand_work_expr.company_id = emp_proj.company_id AND cand_work_expr.parent_company_id = emp_proj.parent_company_id AND 
                  cand_work_expr.job_role_id = emp_proj.job_role_id) LEFT JOIN
                  vacancies vac ON emp_proj.vacancy_id = vac.vacancy_id LEFT JOIN
                  candidates_assigned_to_training_projects cand_ass ON cand.candidate_id = cand_ass.candidate_id LEFT JOIN
                  training_projects ON cand_ass.training_project_id = training_projects.training_project_id LEFT JOIN
                  training_programs ON training_projects.training_program_id = training_programs.training_program_id LEFT JOIN
                  company_contacts compcont ON cand_work_expr.company_id = compcont.company_id LEFT JOIN
                  employees emp ON training_projects.employee_id = emp.employee_id
WHERE  cand.registration_id IS NOT NULL AND cand_work_expr.designation_to_date &gt; curdate() AND cand_work_expr.designation_from_date BETWEEN '2014-02-01' AND 
                  '2014-05-10'
GROUP BY cand_work_expr.candidate_id
ORDER BY cand.first_name</value>
  </data>
</root>